logging {
	level = "debug"
    format = "json"

	// Forward internal logs to the local Loki instance.
	// write_to = [loki.write.loki.receiver]
}

//
// Logging
//
discovery.docker "logs_integrations_docker" {
    host             = "unix:///var/run/docker.sock"
    refresh_interval = "5s"
	filter {
		name = "label"
		values = ["grafana.logs/enabled=true"]
	}
}

loki.write "loki" {
	endpoint {
		url = format(
			"http://%s/loki/api/v1/push",
			coalesce(env("LOKI_HOST"), "localhost:3100"),
		)
	}
}

discovery.relabel "label_logs_filter" {
	targets = discovery.docker.logs_integrations_docker.targets

	rule {
		source_labels = ["__meta_docker_container_name"]
		regex         = "/(.*)"
		target_label  = "container"
	}
}

loki.source.docker "logs_integrations_docker" {
    host             = "unix:///var/run/docker.sock"
    targets          = discovery.docker.logs_integrations_docker.targets
    forward_to       = [loki.write.loki.receiver]
    refresh_interval = "5s"
	relabel_rules = discovery.relabel.label_logs_filter.rules

	labels     = {"source" = "docker"}
}

//
// Tracing
//
otelcol.receiver.otlp "default" {
	grpc {
		endpoint = "0.0.0.0:4317"
	}

	http {
		endpoint = "0.0.0.0:4318"
	}

	output {
		traces  = [otelcol.processor.batch.default.input]
	}
}

otelcol.processor.batch "default" {
	timeout = "2s"		

	output {
		traces  = [otelcol.exporter.otlp.tempo.input]
	}
}

otelcol.exporter.otlp "tempo" {
	client {
	endpoint = coalesce(env("TEMPO_HOST"), "localhost:4317")

	tls {
		insecure = true
		insecure_skip_verify = true
	}
	}
}