package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"
	"user-service/graph/model"

	"github.com/99designs/gqlgen/graphql"
)

// Signup is the resolver for the signup field.
func (r *mutationResolver) Signup(ctx context.Context, input model.SignupRequest) (*model.SignupPayload, error) {
	entity := model.User{
		Firstname: input.Firstname,
		Lastname:  input.Lastname,
		Email:     input.Email,
	}

	if err := r.Db.Model(model.User{}).Create(&entity).Error; err != nil {
		return nil, err
	}

	res := model.SignupPayload{Response: entity}

	return &res, nil
}

// Signin is the resolver for the signin field.
func (r *mutationResolver) Signin(ctx context.Context, input model.SigninRequest) (*model.SigninPayload, error) {
	var user model.User
	if err := r.Db.Model(&model.User{}).Where("email = ?", input.Email).First(&user).Error; err != nil {
		return nil, err
	}

	// cookie := &http.Cookie{Name: "cookie-name", Value: "test", Expires: time.Now().UTC().Add(24 * time.Hour)}

	rc := graphql.GetOperationContext(ctx)
	rc.Headers.Add("test", "WOWWOWOWOWOOWOWOWOOWOWOWOWOOWOWOWOWOOW")

	res := model.SigninPayload{Response: user}

	return &res, nil
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*model.User, error) {
	panic(fmt.Errorf("not implemented: Me - me"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	var users []*model.User
	if err := r.Db.Model(model.User{}).Find(&users).Error; err != nil {
		return nil, err
	}

	return users, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
