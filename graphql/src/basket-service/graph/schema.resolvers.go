package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"basket-service/graph/model"
	"context"
	"encoding/json"
	"time"

	"github.com/google/uuid"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// Product is the resolver for the product field.
func (r *basketItemResolver) Product(ctx context.Context, obj *model.BasketItem) (*model.Product, error) {
	return &model.Product{
		ID: obj.ProductID,
	}, nil
}

// CreateBasket is the resolver for the createBasket field.
func (r *mutationResolver) CreateBasket(ctx context.Context, input model.CreateBasketRequest) (*model.CreateBasketPayload, error) {
	// return &model.CreateBasketPayload{Response: model.ErrorPayload{Errors: []*model.Error{{Message: "test", Path: "asd"}}}}, nil

	basket := model.Basket{
		ID: uuid.New(),
	}

	for _, item := range input.Items {
		basket.Items = append(basket.Items, &model.BasketItem{
			ID:        uuid.New(),
			ProductID: item.ProductID,
			Price:     10,
			Quantity:  item.Quantity,
		})
	}

	bytes, err := json.Marshal(basket)
	if err != nil {
		return nil, gqlerror.Errorf("Unable to save basket: %v", err)
	}

	if err := r.Redis.Set(ctx, basket.ID.String(), string(bytes), 24*time.Hour).Err(); err != nil {
		return nil, gqlerror.Errorf("Unable to save basket: %v", err)
	}

	res := model.CreateBasketPayload{Response: basket}

	return &res, nil
}

// Basket is the resolver for the basket field.
func (r *queryResolver) Basket(ctx context.Context, id uuid.UUID) (*model.Basket, error) {
	value, err := r.Redis.Get(ctx, id.String()).Result()
	if err != nil {
		return nil, gqlerror.Errorf("Record not found: %v", err)
	}

	var basket model.Basket
	if err := json.Unmarshal([]byte(value), &basket); err != nil {
		return nil, gqlerror.Errorf("Record not found: %v", err)
	}

	return &basket, nil
}

// BasketItem returns BasketItemResolver implementation.
func (r *Resolver) BasketItem() BasketItemResolver { return &basketItemResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type basketItemResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
